/*
intution:
let x = 3 , n =5
if n is a decimal number then atmost in its binary representation we will have log2(n)+1 digits
we run a loop on the binary representation of the power
take n bin form = 101 ------> here 3^1*3^2*3^4 take even powers ignore 0 in bin form and cal pow for 1  which is 3^1*3^4 = 3^5
now if n[i] = 1 then ans *=x and x*=x
if n[i] = 0 then x*=x to move to next int which is 1
*/




#include <iostream>
using namespace std;

class Solution {
public:
    double myPow(double x, int n) {
        long long binform = n; 
        if (n < 0) {
            x = 1 / x;
            binform = -binform;
        }

        double ans = 1.0;
        while (binform > 0) {
            if (binform % 2 == 1) {
                ans *= x;
            }
            x *= x;
            binform /= 2;
        }

        return ans;
    }
};

int main() {
    Solution sol;

    // Test cases
    cout << "myPow(2.0, 10): " << sol.myPow(2.0, 10) << endl;  // Expected: 1024.0
    cout << "myPow(2.1, 3): " << sol.myPow(2.1, 3) << endl;    // Expected: ~9.261
    cout << "myPow(2.0, -2): " << sol.myPow(2.0, -2) << endl;  // Expected: 0.25
    cout << "myPow(0.5, -3): " << sol.myPow(0.5, -3) << endl;  // Expected: 8.0
    cout << "myPow(0, 5): " << sol.myPow(0, 5) << endl;        // Expected: 0.0
    cout << "myPow(1, -2147483648): " << sol.myPow(1, -2147483648) << endl; // Expected: 1.0

    return 0;
}
